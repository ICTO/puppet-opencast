###########################################
### Matterhorn configuration properties ###
###########################################

# The HTTP server port.  If you set this to port 80, you need to run Matterhorn as root. Alternatively, if you want
# users to access Matterhorn on port 80 but do not want to run as root, keep the default port (8080) and use an Apache
# HTTPD server with mod_proxy to forward port 80 traffic to Matterhorn on port 8080.
org.osgi.service.http.port=8080

# Whether Matterhorn itself should handle HTTPS traffic.  Even if you set this to 'false',you can still use an Apache
# HTTPD server as a proxy to handle SSL)
org.osgi.service.http.secure.enabled=false

# The secure server port to use if running Matterhorn itself with HTTPS (as opposed to a proxy handling HTTPS).
#org.osgi.service.http.port.secure=8443

# The internal URL of this matterhorn installation, used by Matterhorn to locate services running on this instance and
# for inter-node communication in distributed setups involving more than one Matterhorn node.
#
# Note that while the server.url is the public url of this instance, there is the actual public url of an individual
# tenant, which is configured in etc/load/org.opencastproject.organization-<tenant id>.cfg with the default tenant id
# being "mh_default_org".
#
# Also note that if this felix installation is proxied behind an Apache HTTPD reverse proxy, and communication is meant
# to go through that proxy, then server.url should point to the proxy's port (usually 80).
org.opencastproject.server.url=<%= @server_url %>

# The url of the remote service registry.  This is used in cases where there is no direct connection to the service
# registry database such as capture agens running in protected environments. This is typically true for capture agents
# and should be set to the url of a server running the actual implementation of the service registry and the path to
# the service registry(admin, worker, etc. See the build profiles in pom.xml for a complete list).
org.opencastproject.serviceregistry.url=${org.opencastproject.server.url}/services

# The base URL to use for publishing job locations. If left commented out, the local server URL will be used.  Set this
# if you intend to support swapping servers with different IPs or host names.
org.opencastproject.jobs.url=${org.opencastproject.server.url}

# The directory where the system will store its processed files (including temporary files).  This directory should
# be persistent between reboots (i.e., not /tmp)
org.opencastproject.storage.dir=<%= @local_storage_dir %>

# The username and password to present to other Matterhorn servers when calling their REST endpoints.
# The remote server must contain matching values in its config.properties.
org.opencastproject.security.digest.user=<%= @digest_user_name %>
org.opencastproject.security.digest.pass=<%= @digest_user_pass %>

# The number of times to retry a request if the nonce expires.
org.opencastproject.security.digest.nonce.retries=12

# The configuration property specifying the minimum amount of time in seconds wait before retrying a request after
# a nonce timeout. Default is 300 seconds (5 minutes).
org.opencastproject.security.digest.nonce.base.time=300

# The maximum amount of time to wait in addition to the base time for a random generator to add after a nonce timeout
# so that requests that timeout won't all try again at exactly the same time. Default is 300 seconds (5 minutes).
org.opencastproject.security.digest.nonce.variable.time=300

<% if @enable_demo_admin %>
# Optional demo account with administrative rights.
org.opencastproject.security.admin.user=<%= @demo_admin_name %>
org.opencastproject.security.admin.pass=<%= @demo_admin_pass %>
org.opencastproject.security.admin.roles=ROLE_ADMIN,ROLE_USER,ROLE_OAUTH_USER
<% end %>

# Optional demo accounts with series memberships, but not administrative rights.  If set to 'true', 1000 users will be
# loaded into the sample user directory.  Usernames are user0, ..., user999.  Passwords are pass0, ..., pass999.
org.opencastproject.security.demo.loadusers=<%= @enable_demo_user %>

# To enable the LDAP user provider, you must uncomment this line, and run on a JVM that provides the
# "com.sun.jndi.ldap" package.
org.osgi.framework.system.packages.extra=com.sun.jndi.ldap,com.sun.net.ssl.internal.ssl

# The base URL of the streaming server (ususally "rtmp://<SERVER_URL>/matterhorn-engage").
# ${org.opencastproject.server.url} can not be used, because the streaming server does not use the HTTP protocol.
# Streaming is not included in the default workflow, since the Red5 streaming server is a 3rd party component that
# requires separate installation.
<% if @streaming_url %>
org.opencastproject.streaming.url=<%= @streaming_url %>

# The directory where the matterhorn streaming app for Red5 stores the streams
org.opencastproject.streaming.directory=<%= @streaming_dir %>
<% end %>
# Some newer streaming server versions expect an "flv:" tag within the rtmp URL.
# Not every RTMP-streaming server is compatible with this (i.e. nginx), so this
# is the compatibility mode to the old syntax.
# true = without "flv:" tag - old syntax
# false = with "flv:" tag - new syntax
org.opencastproject.streaming.flvcompatibility=<%= @flvcompatibility %>

# The directory to store media, metadata, and attachments for download from the engage tool
org.opencastproject.download.directory=<%= @download_dir %>

# The base URL for media downloads.
org.opencastproject.download.url=<%= @download_url %>

# Relational Database configuration.  By default, Matterhorn uses an embedded H2 database.  A standalone database server
# is recommended for production systems.  If you run the ddl script for your db vendor (see docs/scripts/ddl/) manually,
# (this is recommended) set 'ddl-generation' to 'false'.
org.opencastproject.db.ddl.generation=false

# Enable ddl script generation.  This is used by developers to update the ddl scripts, and should not be enabled in production.
org.opencastproject.db.ddl.script.generation=false

# dbVendor can be any of the values listed at under the "eclipselink.target-database" section of
# http://wiki.eclipse.org/Using_EclipseLink_JPA_Extensions_%28ELUG%29
org.opencastproject.db.vendor=<%= @db_vendor %>

# Matterhorn comes with the jdbc drivers for MySQL (com.mysql.jdbc.Driver) and PostgreSQL (org.postgresql.Driver). To
# add other jdbcDrivers to the Matterhorn runtime, rebuild the matterhorn-db module with your desired drivers.
org.opencastproject.db.jdbc.driver=<%= @db_driver %>

# The jdbc connection url, username, and password
org.opencastproject.db.jdbc.url=<%= @db_url %>
org.opencastproject.db.jdbc.user=<%= @db_user %>
org.opencastproject.db.jdbc.pass=<%= @db_pass %>

# Directory to store the search, series and scheduler solr indices.  This should be a persistent and stable directory (default:
# ${org.opencastproject.storage.dir}/searchindex, ${org.opencastproject.storage.dir}/seriesindex, ${org.opencastproject.storage.dir}/schedulerindex)
org.opencastproject.search.solr.dir=<%= @searchindex_dir %>
org.opencastproject.series.solr.dir=<%= @seriesindex_dir %>
org.opencastproject.scheduler.solr.dir=<%= @schedulerindex_dir %>

# URL of the dedicated Solr server to use with the search service.  Note that if the URL is specified, the local search
# index as configured using ${org.opencastproject.search.solr.dir} will be ignored. A dedicated Solr server should be
# set up in order to enable running multiple instances of the search service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
<% if @solr_search_url %>
org.opencastproject.search.solr.url=<%= @solr_search_url %>
<% end %>

# URL of the dedicated Solr server to use with the scheduler service.  Note that if the URL is specified, the local
# scheduler index as configured using ${org.opencastproject.scheduler.solr.dir} will be ignored. A dedicated Solr server
# should be set up in order to enable running multiple instances of the scheduler service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
#org.opencastproject.scheduler.solr.url=http://localhost:8983/solr/

# URL of the dedicated Solr server to use with the series service.  Note that if the URL is specified, the local series
# index as configured using ${org.opencastproject.series.solr.dir} will be ignored. A dedicated Solr server should be
# set up in order to enable running multiple instances of the series service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
#org.opencastproject.series.solr.url=http://localhost:8983/solr/
<% if @solr_series_url %>
org.opencastproject.series.solr.url=<%= @solr_series_url %>
<% end %>

# The path to the archive repository
org.opencastproject.episode.rootdir=<%= @archive_dir %>

# Directory to store the archive index of the episode service.  This should be a persistent and stable directory (default:
# ${org.opencastproject.storage.dir}/archiveindex)
org.opencastproject.episode.solr.dir=<%= @archiveindex_dir %>

# URL of the dedicated Solr server for use with the episode service.  Note that if the URL is specified, the local episode
# index as configured using ${org.opencastproject.episode.solr.dir} will be ignored. A dedicated Solr server should be
# set up in order to enable running multiple instances of the episode service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
<% if @solr_episode_url %>
org.opencastproject.episode.solr.url=<%= @solr_episode_url %>
<% end %>

# The path to the repository of files used during media processing.
org.opencastproject.file.repo.path=<%= @files_dir %>

# The base URL of the file server.  When using a shared filesystem between servers, set all servers to use the same URL.
# Only then will hard linking between the working file repository and the workspace be enabled to prevent downloads.
org.opencastproject.file.repo.url=<%= @admin_url %>

# The path to the working files (recommend using fast, transient storage)
org.opencastproject.workspace.rootdir=<%= @workspace_dir %>

# The directory to hold the workflow service's solr configuration and data
org.opencastproject.workflow.solr.dir=<%= @workflowindex_dir %>

# The scheduled period in seconds, at which a workspace cleanup operation is performed
org.opencastproject.workspace.cleanup.period=<%= @workspace_cleanup_period %>

# The maximum age a file must reach in seconds before a deletion of the file in the workspace cleanup operation is performed
org.opencastproject.workspace.cleanup.max.age=<%= @workspace_cleanup_age %>

# The ID of the default workflow definition to run when media are ingested
org.opencastproject.workflow.default.definition=<%= @default_workflow %>

# The max number of ingests to allow at the same time. If more ingests try than the max they will receive service unavailable.
# If commented out then the default value will be 0, meaning the server will accept all ingests.
# org.opencastproject.ingest.max.concurrent=3

# The directory to hold the workflow service's Solr configuration and data. This should be a persistent and stable directory (default:
# ${org.opencastproject.storage.dir}/workflowindex)
#org.opencastproject.workflow.solr.dir=${org.opencastproject.storage.dir}/workflowindex

# URL of the dedicated Solr server to use with the workflow service.  Note that if the URL is specified, the local
# workflow index as configured using ${org.opencastproject.workflow.solr.dir} will be ignored. A dedicated Solr server
# should be set up in order to enable running multiple instances of the workflow service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
<% if @solr_workflow_url %>
org.opencastproject.workflow.solr.url=<%= @solr_workflow_url %>
<% end %>

# Send server configuration data to the opencast project to help us track how people are using Matterhorn.  No security
# related information will be sent to the opencast project.  Comment this out to disable this feature.
#org.opencastproject.anonymous.feedback.url=http://opencast.org/form/tracking

# The maximum number of concurrent files to ingest from the inbox directory
#org.opencastproject.inbox.threads=1

# Engage Distribution delay between elements in milliseconds
org.opencastproject.distribution.delay=1000

# Path to the ffmpeg binary. Its name is sufficient if the binary is in the
# system path (default: ffmpeg)
org.opencastproject.composer.ffmpeg.path=<%= @ffmpeg_path %>

# Path to the mediainfo binary. Its name is sufficient if the binary is in the
# system path (default: mediainfo)
org.opencastproject.inspection.mediainfo.path=<%= @mediainfo_path %>

# Path to the ffprobe binary. Its name is sufficient if the binary is in the
# system path (default: ffprobe)
org.opencastproject.inspection.ffprobe.path=<%= @ffprobe_path %>

# Path to the qtsbtlembedder binary. Its name is sufficient if the binary is in
# the system path (default: qtsbtlembedder)
#org.opencastproject.composer.qtembedder.path=/usr/local/bin/qtsbtlembedder

# Path to the tesseract binary used by the text analyzer. Its name is
# sufficient if the binary is in the system path (default: tesseract)
org.opencastproject.textanalyzer.tesseract.path=<%= @tesseract_path %>

# Additional options for Tesseract like language or page segmentation mode.
# The default are no additional options.
#org.opencastproject.textanalyzer.tesseract.options=<%= @tesseract_options %>

# Path to the hunspell binary used by the matterhorn-dictionary-hunspell
# module. The default ist just "hunspell" which requires hunspell to be in the
# search path.
org.opencastproject.dictionary.hunspell.binary=hunspell

# Command to use for filtering text by the matterhorn-dictionary-hunspell
# module. The command is appended to the hunspell binary path. It should filter
# the text from stdin and print the recognized words to stdout. Usually this
# should be a combination of "-G" and a list of dictionaries. The default is to
# use "-d de_DE,en_GB,en_US -G".
org.opencastproject.dictionary.hunspell.command="-d de_DE,en_GB,en_US -G"

# Path to the gst-launch binary. Its name is sufficient if the binary is in the
# system path (default: gst-launch)
org.opencastproject.export.gstreamer.path=<%= @gst_launch_path %>

# The path for SoX command line used by audio normalization
org.opencastproject.sox.path=<%= @sox_path %>
